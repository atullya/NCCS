#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_SYMBOLS 10
#define MAX_PRODUCTIONS 10
#define MAX_LEN 20

char productions[MAX_PRODUCTIONS][MAX_LEN];
char first[MAX_SYMBOLS][MAX_LEN];
char follow[MAX_SYMBOLS][MAX_LEN];
int numProductions;

int isTerminal(char c) {
    return !isupper(c);
}

void addToSet(char *set, char c) {
    if (strchr(set, c) == NULL) {
        int len = strlen(set);
        set[len] = c;
        set[len + 1] = '\0';
    }
}

void findFirst(char symbol, int index) {
    if (isTerminal(symbol)) {
        addToSet(first[index], symbol);
        return;
    }

    for (int i = 0; i < numProductions; i++) {
        if (productions[i][0] == symbol) {
            int j = 2;
            while (productions[i][j] != '\0') {
                if (isTerminal(productions[i][j])) {
                    addToSet(first[index], productions[i][j]);
                    break;
                } else {
                    int nextIndex = productions[i][j] - 'A';
                    findFirst(productions[i][j], nextIndex);
                    for (int k = 0; k < strlen(first[nextIndex]); k++) {
                        if (first[nextIndex][k] != 'ε') {
                            addToSet(first[index], first[nextIndex][k]);
                        }
                    }
                    if (strchr(first[nextIndex], 'ε') == NULL) break;
                }
                j++;
            }
        }
    }
}

void findFollow(char symbol, int index) {
    if (productions[0][0] == symbol) {
        addToSet(follow[index], '$');
    }

    for (int i = 0; i < numProductions; i++) {
        for (int j = 2; productions[i][j] != '\0'; j++) {
            if (productions[i][j] == symbol) {
                if (productions[i][j + 1] != '\0') {
                    int nextIndex = productions[i][j + 1] - 'A';
                    for (int k = 0; k < strlen(first[nextIndex]); k++) {
                        if (first[nextIndex][k] != 'ε') {
                            addToSet(follow[index], first[nextIndex][k]);
                        }
                    }
                }
                if (productions[i][j + 1] == '\0' || strchr(first[productions[i][j + 1] - 'A'], 'ε')) {
                    int lhsIndex = productions[i][0] - 'A';
                    for (int k = 0; k < strlen(follow[lhsIndex]); k++) {
                        addToSet(follow[index], follow[lhsIndex][k]);
                    }
                }
            }
        }
    }
}

int main() {
    printf("Enter the number of productions: ");
    scanf("%d", &numProductions);
    getchar();

    printf("Enter the productions (e.g., S=AB):\n");
    for (int i = 0; i < numProductions; i++) {
        fgets(productions[i], MAX_LEN, stdin);
        productions[i][strcspn(productions[i], "\n")] = '\0';
    }

    for (int i = 0; i < numProductions; i++) {
        findFirst(productions[i][0], productions[i][0] - 'A');
    }

    printf("\nFirst Sets:\n");
    for (int i = 0; i < numProductions; i++) {
        printf("First(%c) = {%s}\n", productions[i][0], first[productions[i][0] - 'A']);
    }

    for (int i = 0; i < numProductions; i++) {
        findFollow(productions[i][0], productions[i][0] - 'A');
    }

    printf("\nFollow Sets:\n");
    for (int i = 0; i < numProductions; i++) {
        printf("Follow(%c) = {%s}\n", productions[i][0], follow[productions[i][0] - 'A']);
    }

    return 0;
}
