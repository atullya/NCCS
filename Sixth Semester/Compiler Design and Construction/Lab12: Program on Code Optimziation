#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX 100

// Structure to represent a three-address statement
typedef struct {
    char result[10], operand1[10], operand2[10], op[2];
} TAC;

// Function for constant folding optimization
void constantFolding(TAC tac[], int *n) {
    for (int i = 0; i < *n; i++) {
        if (isdigit(tac[i].operand1[0]) && isdigit(tac[i].operand2[0])) { // Check if both operands are constants
            int op1 = atoi(tac[i].operand1);
            int op2 = atoi(tac[i].operand2);
            int result = 0;

            // Perform the operation based on the operator
            if (strcmp(tac[i].op, "+") == 0) result = op1 + op2;
            else if (strcmp(tac[i].op, "-") == 0) result = op1 - op2;
            else if (strcmp(tac[i].op, "*") == 0) result = op1 * op2;
            else if (strcmp(tac[i].op, "/") == 0 && op2 != 0) result = op1 / op2;

            // Update the TAC entry with the result
            sprintf(tac[i].result, "%d", result);
            strcpy(tac[i].op, "=");
            strcpy(tac[i].operand1, ""); // Clear operand1
            strcpy(tac[i].operand2, ""); // Clear operand2
        }
    }
}

// Function to generate target code from three-address code
void generateTargetCode(TAC tac[], int n) {
    printf("\nGenerated Target Code:\n");
    for (int i = 0; i < n; i++) {
        if (strcmp(tac[i].op, "=") == 0) {
            printf("STORE %s, R1\n", tac[i].result); // Store result back to memory
        } else {
            printf("LOAD R1, %s\n", tac[i].operand1); // Load operand1 into register R1
            if (strcmp(tac[i].op, "+") == 0) {
                printf("ADD R1, %s\n", tac[i].operand2); // Perform addition with operand2
            } else if (strcmp(tac[i].op, "*") == 0) {
                printf("MUL R1, %s\n", tac[i].operand2); // Perform multiplication with operand2
            } else if (strcmp(tac[i].op, "-") == 0) {
                printf("SUB R1, %s\n", tac[i].operand2); // Perform subtraction with operand2
            } else if (strcmp(tac[i].op, "/") == 0) {
                printf("DIV R1, %s\n", tac[i].operand2); // Perform division with operand2
            }
            printf("STORE %s, R1\n", tac[i].result); // Store result back to memory
        }
    }
}

int main() {
    int n;
    TAC tac[MAX];
    char input[100];

    printf("Enter the number of three-address statements: ");
    scanf("%d", &n);
    getchar(); // Consume newline

    printf("Enter the three-address statements in the format (result = operand1 op operand2):\n");
    for (int i = 0; i < n; i++) {
        fgets(input, sizeof(input), stdin); // Read the entire line
        sscanf(input, "%s = %s %s %s", tac[i].result, tac[i].operand1, tac[i].op, tac[i].operand2);

        // Check if it's an assignment statement without an operation
        if (strcmp(tac[i].op, "=") == 0 || strcmp(tac[i].operand2, "") == 0) {
            strcpy(tac[i].op, "=");
            strcpy(tac[i].operand2, ""); // Clear operand2 for assignment
        }

        // Remove newline from result variable name
        size_t len = strlen(tac[i].result);
        if (len > 0 && tac[i].result[len - 1] == '\n') {
            tac[i].result[len - 1] = '\0';
        }
    }

    // Perform constant folding optimization
    constantFolding(tac, &n);

    // Generate target code
    generateTargetCode(tac, n);

    return 0;
}
