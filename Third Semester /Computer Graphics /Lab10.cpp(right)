#include <GL/glut.h>
#include <iostream>
#include <ctime>

using namespace std;

int x_max = 700, y_max = 600;
int x1, y1, x2, y2;

void drawPixel(int x, int y) {
    glBegin(GL_POINTS);
    glVertex2i(x, y);
    glEnd();
}

// Direct method
void drawDirect() {
    glColor3f(1.0f, 0.0f, 0.0f);
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    float xIncrement = static_cast<float>(dx) / steps;
    float yIncrement = static_cast<float>(dy) / steps;
    float x = x1, y = y1;
    for (int i = 0; i <= steps; ++i) {
        drawPixel(static_cast<int>(x + 0.5), static_cast<int>(y + 0.5));
        x += xIncrement;
        y += yIncrement;
    }
    glFlush();
}

// DDA algorithm
void drawDDA() {
    glColor3f(0.0f, 0.0f, 1.0f);
    int dx = x2 - x1;
    int dy = y2 - y1;
    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);
    float xinc = static_cast<float>(dx) / steps;
    float yinc = static_cast<float>(dy) / steps;
    float x = x1, y = y1;
    for (int i = 0; i <= steps; ++i) {
        drawPixel(static_cast<int>(x + 0.5), static_cast<int>(y + 0.5));
        x += xinc;
        y += yinc;
    }
    glFlush();
}

// Bresenham algorithm
void drawBresenham() {
    glColor3f(0.0f, 0.0f, 0.0f);
    int dx = abs(x2 - x1);
    int dy = abs(y2 - y1);
    int x = x1, y = y1;
    int sx = (x2 - x1 >= 0) ? 1 : -1;
    int sy = (y2 - y1 >= 0) ? 1 : -1;
    if (dy <= dx) {
        int p = 2 * dy - dx;
        for (int i = 0; i <= dx; ++i) {
            drawPixel(x, y);
            x += sx;
            if (p >= 0) {
                y += sy;
                p -= 2 * dx;
            }
            p += 2 * dy;
        }
    } else {
        int p = 2 * dx - dy;
        for (int i = 0; i <= dy; ++i) {
            drawPixel(x, y);
            y += sy;
            if (p >= 0) {
                x += sx;
                p -= 2 * dy;
            }
            p += 2 * dx;
        }
    }
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(2);

    // Measure time taken for Direct method
    clock_t start_time = clock();
    drawDirect();
    clock_t end_time = clock();
    double direct_time = double(end_time - start_time) / CLOCKS_PER_SEC;

    // Measure time taken for DDA algorithm
    start_time = clock();
    drawDDA();
    end_time = clock();
    double dda_time = double(end_time - start_time) / CLOCKS_PER_SEC;

    // Measure time taken for Bresenham algorithm
    start_time = clock();
    drawBresenham();
    end_time = clock();
    double bresenham_time = double(end_time - start_time) / CLOCKS_PER_SEC;

    cout << "Time taken by Direct method: " << direct_time << " seconds" << endl;
    cout << "Time taken by DDA algorithm: " << dda_time << " seconds" << endl;
    cout << "Time taken by Bresenham algorithm: " << bresenham_time << " seconds" << endl;

    glFlush();
}

void myInit() {
    glClearColor(1.0, 1.0, 1.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, x_max, 0.0, y_max);
}

int main(int argc, char** argv) {
    cout << "Enter first point (x1 y1): ";
    cin >> x1 >> y1;
    cout << "Enter second point (x2 y2): ";
    cin >> x2 >> y2;

    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(x_max, y_max);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Line Drawing Algorithms Comparison-Atullya");

    myInit();

    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}

