#include <stdio.h>
#include <stdlib.h>

typedef struct Node {
	int data;
	struct Node* left;
	struct Node* right;
} Node;

// Function to create a new node
Node* createNode(int value) {
	Node* newNode = (Node*)malloc(sizeof(Node));
	newNode->data = value;
	newNode->left = newNode->right = NULL;
	return newNode;
}

// Function to insert a new node in the BST
Node* insert(Node* root, int value) {
	if (root == NULL) {
		return createNode(value);
	}

	if (value < root->data) {
		root->left = insert(root->left, value);
	} else if (value > root->data) {
		root->right = insert(root->right, value);
	}

	return root;
}

// Function to find the minimum value node in the BST
Node* findMin(Node* node) {
	while (node->left != NULL) {
		node = node->left;
	}
	return node;
}

// Function to delete a node from the BST
Node* deleteNode(Node* root, int value) {
	if (root == NULL) {
		return root;
	}

	if (value < root->data) {
		root->left = deleteNode(root->left, value);
	} else if (value > root->data) {
		root->right = deleteNode(root->right, value);
	} else {
		if (root->left == NULL) {
			Node* temp = root->right;
			free(root);
			return temp;
		} else if (root->right == NULL) {
			Node* temp = root->left;
			free(root);
			return temp;
		}

		Node* temp = findMin(root->right);
		root->data = temp->data;
		root->right = deleteNode(root->right, temp->data);
	}

	return root;
}

// Function to search for a value in the BST
Node* search(Node* root, int value) {
	if (root == NULL || root->data == value) {
		return root;
	}

	if (value < root->data) {
		return search(root->left, value);
	} else {
		return search(root->right, value);
	}
}

// Function to display the inorder traversal of the BST
void inorder(Node* root) {
	if (root != NULL) {
		inorder(root->left);
		printf("%d ", root->data);
		inorder(root->right);
	}
}
void preorder(Node* root) {
	if (root != NULL) {
		printf("%d ", root->data);
		preorder(root->left);
		preorder(root->right);
	}
}
void postorder(Node* root) {
	if (root != NULL) {
		postorder(root->left);
		postorder(root->right);
		printf("%d ", root->data);
	}
}

int main() {
	Node* root = NULL;
	int choice, value;
	printf("\nMenu:\n");
		printf("1. Insert\n");
		printf("2. Delete\n");
		printf("3. Search\n");
		printf("4. Display Inorder\n");
		printf("5. Display Preorder\n");
		printf("6. Display Postorder\n");
		printf("7. Exit\n");
	do {
	
		printf("Enter your choice: ");
		scanf("%d", &choice);

		switch (choice) {
			case 1:
				printf("Enter value to insert: ");
				scanf("%d", &value);
				root = insert(root, value);
				break;
			case 2:
				printf("Enter value to delete: ");
				scanf("%d", &value);
				root = deleteNode(root, value);
				break;
			case 3:
				printf("Enter value to search: ");
				scanf("%d", &value);
				Node* searchResult = search(root, value);
				if (searchResult) {
					printf("Value %d found in the tree.\n", value);
				} else {
					printf("Value %d not found in the tree.\n", value);
				}
				break;
			case 4:
				printf("Inorder traversal: ");
				inorder(root);
				printf("\n");
				break;
			case 5:
				printf("Preorder traversal: ");
				preorder(root);
				printf("\n");
				break;
			case 6:
				printf("Postorder traversal: ");
				postorder(root);
				printf("\n");
				break;
			case 7:
				printf("Exiting...\n");
				exit(0);
			default:
				printf("Invalid choice. Please select again.\n");
		}
	} while (1);

	return 0;
}
